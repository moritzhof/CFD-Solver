#include "helper.h"
#include "visual.h"
#include<iostream>
#include<string>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<iterator>
#include<algorithm>
#include<fstream>


// void write_vtkFile(const char *szProblem, int timeStepNumber,
// 		 double xlength, double ylength, int imax, int jmax,
// 		 double dx, double dy, double k, Matrix& MASS, Matrix& XMOM, Matrix& YMOM, Matrix& ENER){
//
//
// ofstream vtk;
// vtk.open (szProblem.c_str());
//
// vtk << "# vtk DataFile Version 2.0" << endl;
// vtk << "Gengerated for CFD lab" << endl;
// vtk << "ASCII" << endl;
// vtk << endl;
// vtk << "DATASET STRUCTURED_GRID" << endl;
// vtk << "DIMENSIONS " << imax+1 << " " << jmax+1 << endl;
// vtk << "POINTS  " << (imax+1)*(jmax+1) << "  double" << endl;
// vtk << endl;
//
// double originX = 0.0;
// double originY = 0.0;
//
// for(int i = 0; i<imax+1; ++i){
// 	for(int j = 0; j<jmax+1; ++j){
// 		vtk << originX+(i*dx) << " " << originY+(j*dy) << endl;r
// 	}
// }
//
// vtk << "CELL_DATA" <<" " << (imax)+(jmax) << endl;
// vtk << endl;
//
// vtk.close ();
// }
void write_vtkFile(const char *szProblem,
		int    timeStepNumber,
		double xlength,
		double ylength,
		int    imax,
		int    jmax,
		double dx,
		double dy,
		double k,
		Matrix& MASS,
		Matrix& XMOM,
		Matrix& YMOM,
		Matrix& ENER
	){
		int i,j;
	  char szFileName[80];
	  FILE *fp=NULL;
	  std::sprintf( szFileName, "%s.%i.vtk", szProblem, timeStepNumber );
	  fp = fopen( szFileName, "w");
	  if( fp == NULL )
	  {
	    char szBuff[80];
	    std::sprintf( szBuff, "Failed to open %s", szFileName );
	    //ERROR( szBuff );
	    return;
	  }

	  write_vtkHeader( fp, imax, jmax, dx, dy);
	  write_vtkPointCoordinates(fp, imax, jmax, dx, dy);

	  std::fprintf(fp,"CELL_DATA %i \n", (imax)*(jmax) );

	  std::fprintf(fp,"\n");
	  std::fprintf(fp, "VECTORS velocity float\n");
	  for(j = 1; j < jmax+1; j++) {
	    for(i = 1; i < imax+1; i++) {
	      std::fprintf(fp, "%f %f 0\n",XMOM[i][j]/MASS[i][j],YMOM[i][j]/MASS[i][j]);
	    }
	  }

	  std::fprintf(fp,"\n");
	  /*fprintf(fp,"CELL_DATA %i \n", ((imax)*(jmax)) );*/
	  std::fprintf(fp, "SCALARS pressure float 1 \n");
	  std::fprintf(fp, "LOOKUP_TABLE default \n");
	  for(j = 1; j < jmax+1; j++) {
	    for(i = 1; i < imax+1; i++) {

	      std::fprintf(fp, "%f\n", (ENER[i][j] - 0.5*(XMOM[i][j]*XMOM[i][j]+YMOM[i][j]*YMOM[i][j])/MASS[i][j])*(k-1));
	    }
	  }

		std::fprintf(fp,"\n");
	  /*fprintf(fp,"CELL_DATA %i \n", ((imax)*(jmax)) );*/
		std::fprintf(fp, "SCALARS Density float 1 \n");
		std::fprintf(fp, "LOOKUP_TABLE default \n");
		for(j = 1; j < jmax+1; j++) {
			for(i = 1; i < imax+1; i++) {
				fprintf(fp, "%f\n", MASS[i][j] );
			}
		}

	  if( fclose(fp) )
	  {
	    char szBuff[80];
	    std::sprintf( szBuff, "Failed to close %s", szFileName );
	    //ERROR( szBuff );
	  }
	}


	void write_vtkHeader( FILE *fp, int imax, int jmax,
	                      double dx, double dy) {
	  if( fp == NULL )
	  {
	    char szBuff[80];
	    std::sprintf( szBuff, "Null pointer in write_vtkHeader" );
	    //ERROR( szBuff );
	    return;
	  }

	  std::fprintf(fp,"# vtk DataFile Version 2.0\n");
	  std::fprintf(fp,"generated by CFD-lab course output (written by Tobias Neckel) \n");
	  std::fprintf(fp,"ASCII\n");
	  std::fprintf(fp,"\n");
	  std::fprintf(fp,"DATASET STRUCTURED_GRID\n");
	  std::fprintf(fp,"DIMENSIONS  %i %i 1 \n", imax+1, jmax+1);
	  std::fprintf(fp,"POINTS %i float\n", (imax+1)*(jmax+1) );
	  std::fprintf(fp,"\n");
	}


	void write_vtkPointCoordinates( FILE *fp, int imax, int jmax,
	                      double dx, double dy) {
	  double originX = 0.0;
	  double originY = 0.0;

	  int i = 0;
	  int j = 0;

	  for(j = 0; j < jmax+1; j++) {
	    for(i = 0; i < imax+1; i++) {
	      std::fprintf(fp, "%f %f 0\n", originX+(i*dx), originY+(j*dy) );
	    }
	  }
	}
